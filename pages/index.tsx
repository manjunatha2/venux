import axios from 'axios';
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useCallback, useEffect, useRef, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import Card from '../components/Card';
import Sidebar from '../components/Sidebar';
import Button from '../components/styled/Button/Button';
import { addNewPokemons, setPokemons } from '../redux/pokemon/pokemon.actions';
import styles from '../styles/Home.module.css'
import { pokemonType, StoreState } from '../types';


const Home: NextPage = () => {

  const [offset, setOffSet] = useState(0);
  let showRef = useRef<HTMLDivElement>(null);
  const [isEnd, setIsEnd] = useState(false);
  const dispatch = useDispatch();
  const { pokemons } = useSelector((state:StoreState) => state.pokemon);
  const { activeType } = useSelector(
    (state: StoreState) => state.pokemon
  );

  const init = async() => {
    try{
      const {data} = await axios({
        method:'GET',
        url:`https://pokeapi.co/api/v2/pokemon/?offset=${offset}&limit=20`
      })
      if(offset===0){
        dispatch(setPokemons(data.results));
      }else{
        dispatch(addNewPokemons(data.results));
        if(data.results.length<20) setIsEnd(true);
      }
    }catch(err){
      console.log(err);
    }
  }
  const init2 = async() => {
    try{
      const {data} = await axios({
        method:'GET',
        url:activeType
      })
      let poke: any[] = [];
      data.pokemon.map((pk:any) => {
        poke.push(pk.pokemon)
      })
      dispatch(setPokemons(poke));
    }catch(err){
      console.log(err);
    }
  }
  useEffect(() => {
    if(activeType==='all'){
      init();
    }else{
      setOffSet(0);
      init2();
    }
  },[activeType, offset]);

  useEffect(() => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  },[activeType]);

  const handleObserver = useCallback((entries) => {
    const target = entries[0];
    if (target.isIntersecting) {
      setOffSet((prev) => prev + 20);
      console.log(offset);
    }
  }, []);
  
  useEffect(() => {
    const option = {
      root: null,
      rootMargin: "20px",
      threshold: 0
    };
    const observer = new IntersectionObserver(handleObserver, option);
    if (showRef.current) observer.observe(showRef.current);
  }, [handleObserver]);
  
  return (
    <div className={styles.container}>
      <Head>
        <title>Pokemon Tribe</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

        <main className={styles.main}>
          <Sidebar />
        <div className={styles.container2}>
          {
            pokemons.map((pokemon:pokemonType) => (
              <Card key={pokemon.url} name={pokemon.name} url={pokemon.url} /> 
            ))
          }
          {activeType==='all' && <div ref={showRef}  style={{fontSize:25, textAlign:'center'}}>Loading...</div>}
        </div>
        
      </main>

    </div>
  )
}

export default Home
